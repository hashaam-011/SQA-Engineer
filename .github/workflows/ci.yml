name: TaskMaster Pro - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CI: true
  NODE_ENV: test
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

jobs:
  # API Testing Job
  api-tests:
    name: 🧪 API Tests (Jest + Supertest)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    defaults:
      run:
        working-directory: ./server

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🧪 Run API Tests
      run: npm test

    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: api-tests
        name: API Coverage
        fail_ci_if_error: false

  # UI Testing Job
  ui-tests:
    name: 🎭 UI Tests (Cypress E2E)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          client/package-lock.json

    - name: 📦 Install Server Dependencies
      working-directory: ./server
      run: npm ci

    - name: 📦 Install Client Dependencies
      working-directory: ./client
      run: npm ci

    - name: 🚀 Start Backend Server
      working-directory: ./server
      run: npm start &

    - name: ⏳ Wait for Backend
      run: |
        echo "⏳ Waiting for backend server to start..."
        timeout 30 bash -c 'until curl -f http://localhost:5000; do echo "Waiting for backend..."; sleep 2; done' || (echo "❌ Backend failed to start" && exit 1)
        echo "✅ Backend server is running!"

    - name: 🚀 Start Frontend Server
      working-directory: ./client
      run: |
        echo "🚀 Starting React development server..."
        CI=true npm start &

    - name: ⏳ Wait for Frontend
      run: |
        echo "⏳ Waiting for frontend server to start..."
        timeout 60 bash -c 'until curl -f http://localhost:3000; do echo "Waiting for frontend..."; sleep 2; done' || (echo "❌ Frontend failed to start" && exit 1)
        echo "✅ Frontend server is running!"

    - name: 🔍 Debug Server Status
      run: |
        echo "🔍 Checking server status..."
        echo "Backend status:"
        curl -f http://localhost:5000 || echo "Backend not responding"
        echo "Frontend status:"
        curl -f http://localhost:3000 || echo "Frontend not responding"
        echo "Process list:"
        ps aux | grep -E "(node|npm)" | grep -v grep || echo "No Node processes found"

    - name: 🎭 Run Cypress Tests
      working-directory: ./client
      run: |
        echo "🎭 Starting Cypress E2E tests..."
        npx cypress run --spec cypress/e2e/ui-tests.spec.js --reporter spec || (echo "❌ Cypress tests failed" && exit 1)
        echo "✅ All Cypress tests passed!"

    - name: 📸 Upload Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots-${{ matrix.node-version }}
        path: client/cypress/screenshots

    - name: 🎥 Upload Videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-videos-${{ matrix.node-version }}
        path: client/cypress/videos

  # Code Quality & Security
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          client/package-lock.json

    - name: 📦 Install Dependencies
      run: |
        cd server && npm ci
        cd client && npm ci

    - name: 🔍 Check ESLint Installation (Server)
      working-directory: ./server
      run: |
        if npm list eslint >/dev/null 2>&1; then
          echo "ESLint found, running linter..."
          npx eslint . --ext .js --fix-dry-run || echo "ESLint found issues but continuing..."
        else
          echo "ESLint not installed in server, skipping server linting..."
        fi

    - name: 🔍 Run ESLint (Client)
      working-directory: ./client
      run: |
        echo "Running ESLint on React client..."
        npx eslint src --ext .js,.jsx --max-warnings 10 || echo "ESLint found issues but continuing..."

    - name: 🛡️ Run Security Audit
      run: |
        echo "🛡️ Running security audit on server..."
        cd server && (npm audit --audit-level=high && echo "✅ Server: No high-risk vulnerabilities found") || echo "⚠️ Server: Some vulnerabilities found, but continuing..."
        echo "🛡️ Running security audit on client..."
        cd ../client && (npm audit --audit-level=high && echo "✅ Client: No high-risk vulnerabilities found") || echo "⚠️ Client: Some vulnerabilities found, but continuing..."
        echo "✅ Security audit completed"

  # Deployment Readiness Check
  deployment-check:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, code-quality]

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          client/package-lock.json

    - name: 📦 Install Dependencies
      run: |
        cd server && npm ci
        cd client && npm ci

    - name: 🏗️ Build Client
      working-directory: ./client
      run: npm run build

    - name: ✅ Deployment Ready
      run: echo "🎉 All tests passed! Ready for deployment."

    - name: 📝 Generate Test Report
      run: |
        echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ API Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ UI Tests: Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code Quality: Checked" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build: Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Ready for Production Deployment!**" >> $GITHUB_STEP_SUMMARY